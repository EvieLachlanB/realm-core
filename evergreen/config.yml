functions:
  "fetch cmake binaries":
    - command: shell.exec
      params:
        working_dir: realm-core
        script: |-
          set -o errexit verbose

          mkdir cmake_binaries && cd cmake_binaries
          curl -L ${cmake_url} | tar -xz --strip-components=1
          cd ..

  "fetch source":
    - command: git.get_project
      params: {directory: realm-core}
    - command: shell.exec
      params:
        working_dir: realm-core
        script: |-
          set -o errexit
          git submodule update --init --recursive

tasks:
- name: compile
  commands:
  - func: "fetch source"
  - func: "fetch cmake binaries"
  - command: shell.exec
    params:
      working_dir: realm-core
      script: |-
        set -o errexit
        mkdir build
        cd build

        compiler_flags=""
        if [ -n "${c_compiler}" ]; then
            [ -n "${cxx_compiler}" ] ||
                (echo "C compiler defined as ${c_compiler} but C++ compiler is undefined"; exit 1)
            compiler_flags = "-DCMAKE_C_COMPILER=${c_compiler} -DCMAKE_CXX_COMPILER=${cxx_compiler}"
        fi

        ${cmake|cmake} \
          -DREALM_BUILD_COMMANDLINE_TOOLS=On \
          -DREALM_ENABLE_ENCRYPTION=On \
          -DREALM_ENABLE_SYNC=On \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
          $compiler_flags \
          ..

        make -j$(grep -c proc /proc/cpuinfo)
  - command: shell.exec
    params:
      working_dir: realm-core/build
      script: |-
        set -o errexit
        set -o verbose

        FILES_TO_STRIP=$(find -type f -executable -exec file {} + | \
            egrep "ELF (64|32)-bit LSB executable.+not stripped$" | \
            cut -f1 -d:)
        DEBUG_SYMBOL_DIR=debug_symbols
        mkdir $DEBUG_SYMBOL_DIR
        for FILE_TO_STRIP in $FILES_TO_STRIP; do
            DEBUG_SYMBOL_FILE=$(echo $FILE_TO_STRIP | cut -f2- -d/ | sed 's|/|_|g')
            echo "stripping $FILE_TO_STRIP into $DEBUG_SYMBOL_FILE"
            objcopy --only-keep-debug "$FILE_TO_STRIP" "$DEBUG_SYMBOL_DIR/$DEBUG_SYMBOL_FILE.debug"
            strip --strip-debug --strip-unneeded "$FILE_TO_STRIP"
            objcopy --add-gnu-debuglink="$DEBUG_SYMBOL_DIR/$DEBUG_SYMBOL_FILE.debug" "$FILE_TO_STRIP"
        done

  - command: archive.targz_pack
    params:
      target: realm-artifacts.tar.gz
      source_dir: realm-core/build
      include: [./**]
      exclude_files:
        - "*.o"
        - "*.a"
        - "debug_symbols/**"
  - command: archive.targz_pack
    params:
      target: realm-debug-symbols.tar.gz
      source_dir: realm-core/build
      include: [./debug_symbols/**]
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/realm-core-artifacts.tar.gz'
      bucket: mciuploads
      permissions: public-read
      local_file: 'realm-artifacts.tar.gz'
      content_type: '${content_type|application/x-gzip}'
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      remote_file: '${project}/${branch_name}/${task_id}/${execution}/realm-core-debug-symbols.tar.gz'
      bucket: mciuploads
      permissions: public-read
      local_file: 'realm-debug-symbols.tar.gz'
      content_type: '${content_type|application/x-gzip}'

- name: lint
  commands:
  - func: "fetch source"
  - func: "fetch cmake binaries"
  - command: shell.exec
    params:
      working_dir: realm-core
      script: |-
        readonly out=$(git clang-format -v --diff)

        if [[ "$out" == *"no modified files to format"* ]]; then exit 0; fi
        if [[ "$out" == *"clang-format did not modify any files"* ]]; then exit 0; fi

        echo "ERROR: you need to run git clang-format on your commit"
        echo $out
        exit 1
 
# NOTE: When adding a new variant, update the "upload-all" task.
buildvariants:
- name: ubuntu2004
  display_name: "Ubuntu 20.04"
  run_on: ubuntu2004-small
  expansions:
    cmake_url: "https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.tar.gz"
    cmake: "../cmake_binaries/bin/cmake"
  tasks:
  - name: compile
    distros:
    - ubuntu2004-large

- name: rhel70
  display_name: "RHEL 7"
  run_on: rhel70-small
  expansions:
    c_compiler: /opt/mongodbtoolchain/v3/bin/gcc
    cxx_compiler: /opt/mongodbtoolchain/v3/bin/g++
    cmake_url: "https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.tar.gz"
    cmake: "../cmake_binaries/bin/cmake"
  tasks:
  - name: compile
    distros:
    - rhel70-large

- name: ubuntu2004-arm64
  display_name: "Ubuntu 20.04 ARM64"
  run_on: ubuntu2004-arm64-small
  expansions:
  tasks:
  - name: compile
    distros:
    - ubuntu2004-arm64-large

- name: macos-1014
  display_name: "MacOS 10.14"
  run_on: macos-1014-test
  expansions:
    cmake_url: "https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Darwin-x86_64.tar.gz"
    cmake: "../cmake_binaries/CMake.app/Contents/bin/cmake"
  tasks:
  - name: compile
    distros:
    - macos-1014
