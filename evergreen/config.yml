functions:
  "setup packages":
    - command: shell.exec
      params:
        working_dir: realm-core
        script: |-
          set -o errexit verbose
          cmake_url="https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.tar.gz"
          procps_url="https://gitlab.com/procps-ng/procps/-/archive/v3.3.16/procps-v3.3.16.tar.gz"

          mkdir cmake_binaries && cd cmake_binaries
          curl -L $cmake_url | tar -xz --strip-components=1
          cd ..
          BASE_DIR=$(pwd)
          mkdir procps_build && cd procps_build
          curl -L $procps_url | tar -xz --strip-components=1
          ./autogen.sh
          ./configure --prefix=/ --disable-shared
          make DESTDIR=$BASE_DIR/procps_binaries -j$(grep -c proc /proc/cpuinfo) install
          cd ..
          rm -rf procps_build
  "fetch source":
    - command: git.get_project
      params: {directory: realm-core}
    - command: shell.exec
      params:
        working_dir: realm-core
        script: |-
          set -o errexit
          git submodule update --init --recursive

tasks:
- name: compile
  commands:
  - func: "fetch source"
  - func: "setup packages"
  - command: shell.exec
    params:
      working_dir: realm-core
      script: |-
        set -o errexit
        mkdir build
        cd build
        ../cmake_binaries/bin/cmake \
          -G Ninja \
          -DREALM_BUILD_COMMANDLINE_TOOLS=On \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
          -DCMAKE_ENABLE_ENCRYPTION=On \
          -DCMAKE_ENABLE_SYNC=On \
          -DPROCPS_LIBRARY=../procps_binaries/lib \
          -DPROCPS_INCLUDE_DIR=../procps_binaries/include \
          ..

        ninja
  - command: archive.targz_pack
    params:
      target: realm-build-artifacts.tar.gz
      source_dir: realm-core/build
      include: [./**]
      exclude_files:
        - "*.o"
  - command: s3.put
    params:
      aws_key: '${artifacts_aws_access_key}'
      aws_secret: '${artifacts_aws_secret_key}'
      remote_file: '${project}/${branch_name}/realm-core-build-artifacts.tar.gz'
      bucket: mciuploads
      permissions: public-read
      local_file: 'realm-build-artifacts.tar.gz'
      content_type: '${content_type|application/x-gzip}'
- name: lint
  commands:
  - func: "fetch source"
  - func: "setup packages"
  - command: shell.exec
    params:
      working_dir: realm-core
      script: |-
        readonly out=$(git clang-format -v --diff)

        if [[ "$out" == *"no modified files to format"* ]]; then exit 0; fi
        if [[ "$out" == *"clang-format did not modify any files"* ]]; then exit 0; fi

        echo "ERROR: you need to run git clang-format on your commit"
        echo $out
        exit 1
 
# NOTE: When adding a new variant, update the "upload-all" task.
buildvariants:
- name: ubuntu2004
  display_name: "Ubuntu 20.04 64-bit"
  run_on: ubuntu2004-small
  expansions:
  tasks:
  - name: compile
    distros:
    - ubuntu2004-large
  - lint


